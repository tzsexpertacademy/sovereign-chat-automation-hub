
import { useState } from 'react';
import whatsappService from '@/services/whatsappMultiClient';
import { useToast } from '@/hooks/use-toast';

export const useWhatsAppSessionCleaner = () => {
  const [isCleaningSession, setIsCleaningSession] = useState(false);
  const { toast } = useToast();

  const cleanAllSessions = async () => {
    try {
      setIsCleaningSession(true);
      console.log('üßπ [CLEANER] Iniciando limpeza completa de sess√µes...');

      // 1. Obter todas as inst√¢ncias ativas
      const clients = await whatsappService.getAllClients();
      console.log(`üîç [CLEANER] Encontradas ${clients.length} inst√¢ncias para limpar`);

      // 2. Desconectar todas as inst√¢ncias (ignorar erros 500)
      for (const client of clients) {
        try {
          console.log(`üîå [CLEANER] Desconectando ${client.clientId}...`);
          await whatsappService.disconnectClient(client.clientId);
          console.log(`‚úÖ [CLEANER] ${client.clientId} desconectado`);
        } catch (error: any) {
          console.warn(`‚ö†Ô∏è [CLEANER] Erro ao desconectar ${client.clientId} (ignorando):`, error.message);
          // Ignorar erros de disconnect - pode ser que j√° esteja desconectado
        }
        
        // Aguardar 1 segundo entre desconex√µes
        await new Promise(resolve => setTimeout(resolve, 1000));
      }

      // 3. Aguardar 5 segundos para sess√µes limparem
      console.log('‚è≥ [CLEANER] Aguardando limpeza completa...');
      await new Promise(resolve => setTimeout(resolve, 5000));

      console.log('‚úÖ [CLEANER] Limpeza de sess√µes conclu√≠da');
      
      toast({
        title: "Sess√µes Limpas",
        description: `${clients.length} sess√µes foram limpas com sucesso`,
      });

      return true;
    } catch (error: any) {
      console.error('‚ùå [CLEANER] Erro na limpeza:', error);
      toast({
        title: "Erro na Limpeza",
        description: error.message,
        variant: "destructive",
      });
      return false;
    } finally {
      setIsCleaningSession(false);
    }
  };

  return {
    cleanAllSessions,
    isCleaningSession
  };
};
