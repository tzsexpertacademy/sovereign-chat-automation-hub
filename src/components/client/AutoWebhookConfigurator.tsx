import React, { useEffect } from 'react';
import { useToast } from '@/hooks/use-toast';
import unifiedYumerService from '@/services/unifiedYumerService';

interface AutoWebhookConfiguratorProps {
  instanceId: string;
  clientId: string;
}

export const AutoWebhookConfigurator: React.FC<AutoWebhookConfiguratorProps> = ({
  instanceId,
  clientId
}) => {
  const { toast } = useToast();

  const monitorAndConfigureWebhook = async () => {
    console.log('üö® [EMERGENCY] AutoWebhookConfigurator DISABLED - preventing infinite loop');
    return; // DISABLED TEMPORARILY TO STOP INFINITE LOOP
    
    try {
      // Verificar status da inst√¢ncia
      const { supabase } = await import('@/integrations/supabase/client');
      const { data: instance } = await supabase
        .from('whatsapp_instances')
        .select('status, webhook_enabled, connection_state')
        .eq('instance_id', instanceId)
        .eq('client_id', clientId)
        .single();

      if (!instance) {
        console.warn(`‚ö†Ô∏è [AUTO-WEBHOOK] Inst√¢ncia n√£o encontrada: ${instanceId}`);
        return;
      }

      console.log(`üîç [AUTO-WEBHOOK] Status da inst√¢ncia ${instanceId}:`, {
        status: instance.status,
        webhook_enabled: instance.webhook_enabled,
        connection_state: instance.connection_state
      });

      // Se inst√¢ncia est√° conectada mas webhook n√£o est√° configurado
      if (instance.status === 'connected' && !instance.webhook_enabled) {
        console.log(`üöÄ [AUTO-WEBHOOK] Configurando webhook automaticamente para: ${instanceId}`);
        
        const result = await unifiedYumerService.ensureWebhookConfigured(instanceId);
        
        if (result.success) {
          console.log(`‚úÖ [AUTO-WEBHOOK] Webhook configurado com sucesso: ${instanceId}`);
          
          toast({
            title: "üéâ Webhook Configurado",
            description: "Sistema pronto para receber mensagens! Agora voc√™ pode testar enviando uma mensagem para o WhatsApp.",
            duration: 5000,
          });
        } else {
          console.error(`‚ùå [AUTO-WEBHOOK] Falha ao configurar webhook:`, result.error);
          
          toast({
            title: "‚ö†Ô∏è Webhook Pendente",
            description: "Webhook n√£o foi configurado automaticamente. Configure manualmente se necess√°rio.",
            variant: "destructive",
            duration: 3000,
          });
        }
      }
    } catch (error) {
      console.error(`‚ùå [AUTO-WEBHOOK] Erro no monitoramento:`, error);
    }
  };

  useEffect(() => {
    if (instanceId && clientId) {
      // Configurar imediatamente
      monitorAndConfigureWebhook();
      
      // Verificar periodicamente (a cada 10 segundos)
      const interval = setInterval(monitorAndConfigureWebhook, 10000);
      
      return () => clearInterval(interval);
    }
  }, [instanceId, clientId]);

  // Componente invis√≠vel - s√≥ executa l√≥gica
  return null;
};