
// Sistema de fallback inteligente para √°udio com convers√£o para texto

import { useToast } from '@/hooks/use-toast';

export interface AudioFallbackResult {
  success: boolean;
  method: 'audio' | 'text' | 'failed';
  message: string;
  textContent?: string;
  error?: string;
}

class AudioFallbackService {
  private failedAudios: Map<string, Blob> = new Map();
  private maxRetries = 3;
  private retryDelays = [2000, 5000, 10000];

  async processAudioWithFallback(
    audioBlob: Blob,
    duration: number,
    sendAudioFunction: (blob: Blob) => Promise<any>,
    chatId: string,
    messageId: string
  ): Promise<AudioFallbackResult> {
    console.log('üéµ ===== PROCESSAMENTO DE √ÅUDIO COM FALLBACK =====');
    console.log('üìä Informa√ß√µes do √°udio:', {
      size: audioBlob.size,
      type: audioBlob.type,
      duration,
      chatId,
      messageId
    });

    // Tentar envio direto do √°udio
    for (let attempt = 0; attempt < this.maxRetries; attempt++) {
      try {
        console.log(`üîÑ Tentativa ${attempt + 1}/${this.maxRetries} de envio de √°udio`);
        
        if (attempt > 0) {
          const delay = this.retryDelays[attempt - 1];
          console.log(`‚è±Ô∏è Aguardando ${delay}ms antes da pr√≥xima tentativa...`);
          await this.sleep(delay);
        }

        const result = await sendAudioFunction(audioBlob);
        
        if (result.success) {
          console.log('‚úÖ √Åudio enviado com sucesso na tentativa', attempt + 1);
          return {
            success: true,
            method: 'audio',
            message: `√Åudio enviado com sucesso (${duration}s)`
          };
        } else {
          console.warn(`‚ö†Ô∏è Tentativa ${attempt + 1} falhou:`, result.error);
        }
      } catch (error: any) {
        console.error(`‚ùå Erro na tentativa ${attempt + 1}:`, error);
        
        // Se √© o erro "Evaluation failed", n√£o vale a pena tentar novamente
        if (error.message && error.message.includes('Evaluation failed')) {
          console.log('üö® Erro "Evaluation failed" detectado, pulando para fallback');
          break;
        }
      }
    }

    console.log('üîÑ Todas as tentativas de √°udio falharam, iniciando fallback...');
    
    // Salvar √°udio para reenvio posterior
    this.failedAudios.set(messageId, audioBlob);
    
    // Tentar convers√£o para texto
    try {
      const textContent = await this.convertAudioToText(audioBlob);
      
      if (textContent) {
        console.log('‚úÖ √Åudio convertido para texto com sucesso');
        return {
          success: true,
          method: 'text',
          message: `√Åudio convertido para texto (${duration}s)`,
          textContent
        };
      } else {
        throw new Error('Convers√£o para texto retornou vazio');
      }
    } catch (error: any) {
      console.error('‚ùå Fallback para texto tamb√©m falhou:', error);
      
      // √öltimo recurso: mensagem de erro amig√°vel
      const fallbackMessage = `üéµ [√ÅUDIO N√ÉO ENVIADO]

‚ùå N√£o foi poss√≠vel enviar o √°udio de ${duration}s devido a problemas t√©cnicos.

üí° Solu√ß√µes:
‚Ä¢ Tente reenviar o √°udio
‚Ä¢ Use uma mensagem de texto
‚Ä¢ Verifique sua conex√£o

üîß Erro t√©cnico: ${error.message || 'Falha na convers√£o'}`;

      return {
        success: true,
        method: 'text',
        message: '√Åudio convertido para mensagem de erro',
        textContent: fallbackMessage
      };
    }
  }

  private async convertAudioToText(audioBlob: Blob): Promise<string | null> {
    try {
      console.log('üîÑ Iniciando convers√£o de √°udio para texto...');
      
      // Simular convers√£o (em produ√ß√£o, usar servi√ßo real como Whisper)
      // Por enquanto, retornar uma mensagem padr√£o
      const mockTranscription = `[Mensagem de √°udio de ${Math.round(audioBlob.size / 1024)}KB]`;
      
      // Aguardar um pouco para simular processamento
      await this.sleep(2000);
      
      console.log('‚úÖ Convers√£o simulada conclu√≠da');
      return mockTranscription;
    } catch (error) {
      console.error('‚ùå Erro na convers√£o para texto:', error);
      return null;
    }
  }

  public getFailedAudio(messageId: string): Blob | null {
    return this.failedAudios.get(messageId) || null;
  }

  public removeFailedAudio(messageId: string): boolean {
    return this.failedAudios.delete(messageId);
  }

  public getFailedAudiosCount(): number {
    return this.failedAudios.size;
  }

  public clearFailedAudios(): void {
    this.failedAudios.clear();
  }

  private sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

// Singleton
export const audioFallbackService = new AudioFallbackService();
