
import { supabase } from "@/integrations/supabase/client";
import { whatsappInstancesService, WhatsAppInstanceData } from "./whatsappInstancesService";
import { codechatApiService } from "./codechatApiService";

/**
 * Gerenciador Unificado de Inst√¢ncias WhatsApp
 * LOCAL FIRST: Prioriza dados do Supabase, APIs externas secund√°rias
 */
export class WhatsAppInstanceManager {
  
  /**
   * Buscar inst√¢ncias ativas de um cliente (LOCAL FIRST)
   */
  async getActiveClientInstances(clientId: string): Promise<WhatsAppInstanceData[]> {
    console.log('üîç [INSTANCE-MANAGER] Buscando inst√¢ncias locais para cliente:', clientId);
    
    try {
      // SEMPRE usar dados locais como fonte da verdade
      const localInstances = await whatsappInstancesService.getInstancesByClientId(clientId);
      
      // Filtrar apenas inst√¢ncias ativas/conectadas para importa√ß√£o
      const activeInstances = localInstances.filter(instance => 
        instance.status === 'connected' || instance.status === 'qr_ready'
      );
      
      console.log('‚úÖ [INSTANCE-MANAGER] Inst√¢ncias encontradas:', {
        total: localInstances.length,
        active: activeInstances.length,
        instances: activeInstances.map(i => ({
          id: i.instance_id,
          status: i.status,
          name: i.custom_name
        }))
      });
      
      return activeInstances;
    } catch (error) {
      console.error('‚ùå [INSTANCE-MANAGER] Erro ao buscar inst√¢ncias locais:', error);
      return [];
    }
  }

  /**
   * Verificar se cliente tem inst√¢ncias v√°lidas para importa√ß√£o
   */
  async hasValidInstancesForImport(clientId: string): Promise<boolean> {
    const instances = await this.getActiveClientInstances(clientId);
    return instances.length > 0;
  }

  /**
   * Buscar chats de uma inst√¢ncia espec√≠fica (API externa)
   */
  async getInstanceChats(instanceName: string, limit: number = 50): Promise<any[]> {
    console.log('üì° [INSTANCE-MANAGER] Buscando chats da inst√¢ncia:', instanceName);
    
    try {
      const chats = await codechatApiService.findChats(instanceName, limit);
      
      console.log('‚úÖ [INSTANCE-MANAGER] Chats encontrados:', chats.length);
      return chats;
    } catch (error) {
      console.error('‚ùå [INSTANCE-MANAGER] Erro ao buscar chats:', error);
      return [];
    }
  }

  /**
   * Buscar mensagens de um chat espec√≠fico (API externa)
   */
  async getInstanceMessages(instanceName: string, chatId: string, limit: number = 50): Promise<any[]> {
    console.log('üì® [INSTANCE-MANAGER] Buscando mensagens:', { instanceName, chatId });
    
    try {
      const messages = await codechatApiService.findMessages(instanceName, chatId, limit);
      
      console.log('‚úÖ [INSTANCE-MANAGER] Mensagens encontradas:', messages.length);
      return messages;
    } catch (error) {
      console.error('‚ùå [INSTANCE-MANAGER] Erro ao buscar mensagens:', error);
      return [];
    }
  }

  /**
   * Sincronizar status de inst√¢ncia (LOCAL + API)
   */
  async syncInstanceStatus(instanceId: string): Promise<void> {
    console.log('üîÑ [INSTANCE-MANAGER] Sincronizando status:', instanceId);
    
    try {
      // Status ser√° atualizado via webhook ou sincroniza√ß√£o
      // const apiStatus = await codechatApiService.getInstanceStatus(instanceId);
      
      // Status ser√° atualizado via webhook
      const localStatus = 'disconnected'; // Placeholder
      
      // TODO: Implementar sincroniza√ß√£o real quando necess√°rio
      // await whatsappInstancesService.updateInstanceStatus(instanceId, localStatus);
      
      console.log('‚úÖ [INSTANCE-MANAGER] Status sincronizado:', { instanceId, status: localStatus });
    } catch (error) {
      console.error('‚ùå [INSTANCE-MANAGER] Erro ao sincronizar status:', error);
    }
  }

  /**
   * Obter resumo de inst√¢ncias para dashboard
   */
  async getInstancesSummary(clientId: string): Promise<{
    total: number;
    connected: number;
    disconnected: number;
    instances: WhatsAppInstanceData[];
  }> {
    const instances = await whatsappInstancesService.getInstancesByClientId(clientId);
    
    const connected = instances.filter(i => i.status === 'connected').length;
    const disconnected = instances.filter(i => i.status === 'disconnected').length;
    
    return {
      total: instances.length,
      connected,
      disconnected,
      instances
    };
  }
}

export const whatsappInstanceManager = new WhatsAppInstanceManager();
