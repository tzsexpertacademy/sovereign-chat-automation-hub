
#!/bin/bash

echo "üîç DIAGN√ìSTICO COMPLETO - PROBLEMAS DE CONEX√ÉO WHATSAPP"
echo "======================================================"

# Verificar se est√° rodando como root
if [ "$EUID" -ne 0 ]; then
    echo "‚ùå Execute como root: sudo ./scripts/diagnose-whatsapp-connection-issues.sh"
    exit 1
fi

echo "1Ô∏è‚É£ VERIFICANDO VERS√ïES DOS PACOTES..."
echo "======================================"
cd server
echo "üì¶ Vers√£o WhatsApp Web.js:"
npm list whatsapp-web.js 2>/dev/null | grep whatsapp-web.js || echo "‚ö†Ô∏è N√£o encontrado"

echo "üì¶ Vers√£o Puppeteer:"
npm list puppeteer 2>/dev/null | grep puppeteer || echo "‚ö†Ô∏è N√£o encontrado"

echo "üì¶ Vers√£o Node.js:"
node --version

echo ""
echo "2Ô∏è‚É£ VERIFICANDO AMBIENTE PUPPETEER..."
echo "===================================="
echo "üñ•Ô∏è Display dispon√≠vel:"
echo $DISPLAY

echo "üîç Fontes do sistema:"
fc-list | head -5

echo "üîç Depend√™ncias Chrome:"
ldd $(which google-chrome 2>/dev/null || echo "/usr/bin/chromium-browser") 2>/dev/null | head -5 || echo "‚ö†Ô∏è Chrome n√£o encontrado"

echo ""
echo "3Ô∏è‚É£ VERIFICANDO LOGS DE ERRO DETALHADOS..."
echo "========================================"
echo "üîç √öltimos erros cr√≠ticos:"
tail -50 ../logs/whatsapp-multi-client.log 2>/dev/null | grep -i -E "(error|failed|timeout|crashed|killed)" | tail -5

echo ""
echo "4Ô∏è‚É£ VERIFICANDO CONECTIVIDADE WHATSAPP WEB..."
echo "============================================"
echo "üåê Testando conectividade com WhatsApp Web:"
curl -I --connect-timeout 10 --max-time 15 https://web.whatsapp.com 2>/dev/null | head -3 || echo "‚ùå Falha na conex√£o"

echo ""
echo "5Ô∏è‚É£ VERIFICANDO PROCESSOS PUPPETEER..."
echo "===================================="
echo "üîç Processos Chrome detalhados:"
ps aux | grep -E "(chrome|chromium)" | grep -v grep | head -3

echo ""
echo "6Ô∏è‚É£ VERIFICANDO MEM√ìRIA E RECURSOS..."
echo "=================================="
echo "üíæ Mem√≥ria dispon√≠vel:"
free -h | head -2

echo "üíΩ Espa√ßo em disco:"
df -h | grep -E "(/$|/tmp)" | head -2

echo ""
echo "7Ô∏è‚É£ CRIANDO TESTE DE PUPPETEER ISOLADO..."
echo "======================================="

# Criar teste isolado de Puppeteer
cat > test-puppeteer-isolated.js << 'EOF'
const puppeteer = require('puppeteer');

console.log('üß™ TESTE ISOLADO DE PUPPETEER');
console.log('=============================');

(async () => {
  try {
    console.log('1Ô∏è‚É£ Iniciando Puppeteer...');
    
    const browser = await puppeteer.launch({
      headless: 'new',
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-gpu',
        '--no-first-run',
        '--disable-background-timer-throttling',
        '--disable-backgrounding-occluded-windows',
        '--disable-renderer-backgrounding'
      ],
      timeout: 60000
    });
    
    console.log('‚úÖ Browser criado com sucesso');
    
    console.log('2Ô∏è‚É£ Abrindo p√°gina...');
    const page = await browser.newPage();
    
    console.log('3Ô∏è‚É£ Navegando para WhatsApp Web...');
    await page.goto('https://web.whatsapp.com', { 
      waitUntil: 'networkidle2',
      timeout: 30000 
    });
    
    console.log('‚úÖ P√°gina carregada com sucesso');
    
    console.log('4Ô∏è‚É£ Aguardando QR Code aparecer...');
    
    // Aguardar elemento do QR code
    const qrSelector = 'canvas[aria-label="Scan me!"], div[data-testid="qr-code"]';
    await page.waitForSelector(qrSelector, { timeout: 30000 });
    
    console.log('‚úÖ QR Code detectado na p√°gina!');
    
    console.log('5Ô∏è‚É£ Mantendo sess√£o por 30 segundos...');
    await new Promise(resolve => setTimeout(resolve, 30000));
    
    console.log('‚úÖ Sess√£o mantida com sucesso');
    
    await browser.close();
    console.log('‚úÖ TESTE CONCLU√çDO COM SUCESSO');
    
  } catch (error) {
    console.error('‚ùå ERRO NO TESTE:', error.message);
    console.error('Stack:', error.stack);
  }
})();
EOF

echo "üß™ Executando teste isolado de Puppeteer..."
timeout 120 node test-puppeteer-isolated.js || echo "‚è∞ Teste interrompido por timeout"

echo ""
echo "8Ô∏è‚É£ RECOMENDA√á√ïES BASEADAS NO DIAGN√ìSTICO..."
echo "========================================="

# Verificar vers√£o do WhatsApp Web.js
WHATSAPP_VERSION=$(npm list whatsapp-web.js --depth=0 2>/dev/null | grep whatsapp-web.js | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' || echo "unknown")

if [[ "$WHATSAPP_VERSION" == "unknown" ]]; then
    echo "üîß RECOMENDA√á√ÉO 1: Reinstalar whatsapp-web.js"
    echo "   npm uninstall whatsapp-web.js"
    echo "   npm install whatsapp-web.js@latest"
fi

# Verificar se Chrome est√° funcionando
if ! command -v google-chrome &> /dev/null && ! command -v chromium-browser &> /dev/null; then
    echo "üîß RECOMENDA√á√ÉO 2: Instalar Google Chrome"
    echo "   wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add -"
    echo "   echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' > /etc/apt/sources.list.d/google-chrome.list"
    echo "   apt update && apt install -y google-chrome-stable"
fi

echo ""
echo "9Ô∏è‚É£ IMPLEMENTANDO CORRE√á√ÉO EXPERIMENTAL..."
echo "======================================="

# Backup do servidor atual
cp ../server/whatsapp-multi-client-server.js ../server/whatsapp-multi-client-server.js.backup-$(date +%Y%m%d-%H%M%S)

# Implementar corre√ß√£o experimental
node << 'EOF'
const fs = require('fs');
const serverFile = '../server/whatsapp-multi-client-server.js';
let content = fs.readFileSync(serverFile, 'utf8');

console.log('üîß Aplicando corre√ß√£o experimental...');

// 1. FOR√áAR WHATSAPP WEB.JS VERS√ÉO ESPEC√çFICA CONHECIDA POR FUNCIONAR
const forceStableWhatsAppWebJs = `
// CONFIGURA√á√ÉO EXPERIMENTAL - FOR√áAR VERS√ÉO EST√ÅVEL
const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode');

// CONFIGURA√á√ÉO PUPPETEER ULTRA-ROBUSTA
const PUPPETEER_CONFIG = {
    headless: 'new',
    args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-web-security',
        '--disable-features=VizDisplayCompositor',
        '--disable-gpu',
        '--no-first-run',
        '--no-zygote',
        '--disable-background-timer-throttling',
        '--disable-backgrounding-occluded-windows',
        '--disable-renderer-backgrounding',
        '--disable-hang-monitor',
        '--disable-prompt-on-repost',
        '--disable-sync',
        '--disable-translate',
        '--disable-extensions',
        '--disable-plugins',
        '--disable-images',
        '--memory-pressure-off',
        '--max_old_space_size=2048',
        '--js-flags="--max-old-space-size=2048"',
        '--user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
    ],
    timeout: 600000, // 10 minutos
    protocolTimeout: 300000, // 5 minutos
    ignoreHTTPSErrors: true,
    handleSIGINT: false,
    handleSIGTERM: false,
    devtools: false
};

// SISTEMA DE RECUPERA√á√ÉO AGRESSIVA
const RECOVERY_ATTEMPTS = new Map();
const MAX_RECOVERY_ATTEMPTS = 5;
const RECOVERY_DELAY = 30000; // 30 segundos

`;

// Adicionar configura√ß√£o no in√≠cio do arquivo
content = content.replace(
    /const { Client, LocalAuth } = require\('whatsapp-web\.js'\);/,
    forceStableWhatsAppWebJs
);

// 2. FUN√á√ÉO initClient COMPLETAMENTE REESCRITA COM RECUPERA√á√ÉO AGRESSIVA
const bulletproofInitClient = `
// FUN√á√ÉO INITCLIENT ULTRA-ROBUSTA COM RECUPERA√á√ÉO AGRESSIVA
const initClient = async (clientId, isRecovery = false) => {
    const recoveryKey = clientId;
    const currentAttempts = RECOVERY_ATTEMPTS.get(recoveryKey) || 0;
    
    if (currentAttempts >= MAX_RECOVERY_ATTEMPTS) {
        console.log(\`‚ùå [\${clientId}] M√°ximo de tentativas de recupera√ß√£o atingido (\${MAX_RECOVERY_ATTEMPTS})\`);
        return;
    }

    console.log(\`üöÄ [\${new Date().toISOString()}] INIT CLIENT ULTRA-ROBUSTA: \${clientId} (tentativa \${currentAttempts + 1}/\${MAX_RECOVERY_ATTEMPTS})\`);

    try {
        // Limpar cliente anterior AGRESSIVAMENTE
        if (clients[clientId]) {
            try {
                if (clients[clientId].client && !clients[clientId].client._destroyed) {
                    await clients[clientId].client.destroy().catch(() => {});
                }
            } catch (e) {
                console.log(\`üßπ [\${clientId}] Erro ao limpar cliente anterior: \${e.message}\`);
            }
        }

        // Incrementar contador de tentativas
        RECOVERY_ATTEMPTS.set(recoveryKey, currentAttempts + 1);

        // Criar estrutura do cliente
        clients[clientId] = {
            id: clientId,
            client: null,
            status: 'initializing',
            phoneNumber: null,
            hasQrCode: false,
            qrCode: null,
            timestamp: new Date().toISOString(),
            qrTimestamp: null,
            lastActivity: new Date(),
            customName: null,
            info: null,
            recoveryAttempts: currentAttempts + 1
        };

        console.log(\`üîß [\${clientId}] Criando cliente WhatsApp Web.js com configura√ß√£o ultra-robusta...\`);

        const client = new Client({
            authStrategy: new LocalAuth({
                clientId: clientId
            }),
            puppeteer: PUPPETEER_CONFIG
        });

        clients[clientId].client = client;
        console.log(\`‚úÖ [\${clientId}] Cliente WhatsApp Web.js criado com timeouts de 10 minutos\`);

        // EVENT HANDLERS COM RECUPERA√á√ÉO AUTOM√ÅTICA

        client.on('qr', async (qr) => {
            console.log(\`üì± [\${new Date().toISOString()}] QR CODE GERADO EXPERIMENTAL para \${clientId}\`);
            
            try {
                const qrCodeDataUrl = await qrcode.toDataURL(qr, {
                    errorCorrectionLevel: 'M',
                    type: 'image/png',
                    quality: 0.92,
                    margin: 1,
                    color: {
                        dark: '#000000',
                        light: '#FFFFFF'
                    }
                });
                
                const expiresAt = new Date(Date.now() + 5 * 60 * 1000);
                
                if (clients[clientId]) {
                    clients[clientId].hasQrCode = true;
                    clients[clientId].qrCode = qrCodeDataUrl;
                    clients[clientId].qrTimestamp = new Date().toISOString();
                    clients[clientId].status = 'qr_ready';
                    clients[clientId].lastActivity = new Date();
                    
                    console.log(\`‚úÖ [QR-EXPERIMENTAL] QR salvo para \${clientId} - length: \${qrCodeDataUrl.length}\`);
                    
                    // Salvar no banco com retry
                    let dbSaved = false;
                    for (let retry = 0; retry < 3 && !dbSaved; retry++) {
                        try {
                            await supabase
                                .from('whatsapp_instances')
                                .update({
                                    qr_code: qrCodeDataUrl,
                                    has_qr_code: true,
                                    qr_expires_at: expiresAt.toISOString(),
                                    status: 'qr_ready',
                                    updated_at: new Date().toISOString()
                                })
                                .eq('instance_id', clientId);
                            
                            dbSaved = true;
                            console.log(\`‚úÖ [QR-EXPERIMENTAL] QR salvo no banco (tentativa \${retry + 1})\`);
                        } catch (error) {
                            console.error(\`‚ùå [QR-EXPERIMENTAL] Erro ao salvar no banco (tentativa \${retry + 1}):\`, error.message);
                            if (retry < 2) await new Promise(r => setTimeout(r, 1000));
                        }
                    }
                    
                    // Emitir WebSocket com retry
                    for (let retry = 0; retry < 3; retry++) {
                        try {
                            io.emit(\`client_status_\${clientId}\`, {
                                clientId,
                                status: 'qr_ready',
                                hasQrCode: true,
                                qrCode: qrCodeDataUrl,
                                phoneNumber: null,
                                timestamp: Date.now()
                            });
                            
                            console.log(\`‚úÖ [QR-EXPERIMENTAL] QR enviado via WebSocket (tentativa \${retry + 1})\`);
                            break;
                        } catch (error) {
                            console.error(\`‚ùå [QR-EXPERIMENTAL] Erro WebSocket (tentativa \${retry + 1}):\`, error.message);
                            if (retry < 2) await new Promise(r => setTimeout(r, 500));
                        }
                    }
                }
            } catch (error) {
                console.error(\`‚ùå [\${clientId}] Erro cr√≠tico ao processar QR Code:\`, error);
                
                // RECUPERA√á√ÉO AUTOM√ÅTICA em caso de erro no QR
                setTimeout(() => {
                    console.log(\`üîÑ [\${clientId}] Iniciando recupera√ß√£o autom√°tica por erro no QR...\`);
                    initClient(clientId, true).catch(console.error);
                }, 10000);
            }
        });

        client.on('ready', async () => {
            console.log(\`üéâ [\${new Date().toISOString()}] EVENTO READY EXPERIMENTAL: \${clientId}\`);
            
            // Resetar contador de tentativas de recupera√ß√£o
            RECOVERY_ATTEMPTS.delete(recoveryKey);
            
            try {
                if (clients[clientId]) {
                    const phoneNumber = client.info?.wid?.user || client.info?.me?.user || null;
                    
                    clients[clientId].status = 'connected';
                    clients[clientId].phoneNumber = phoneNumber;
                    clients[clientId].hasQrCode = false;
                    clients[clientId].qrCode = null;
                    clients[clientId].lastActivity = new Date();
                    clients[clientId].info = client.info;
                    
                    console.log(\`üì± [\${clientId}] READY EXPERIMENTAL - Telefone: \${phoneNumber}\`);
                    
                    // Atualizar no banco com retry
                    for (let retry = 0; retry < 3; retry++) {
                        try {
                            await supabase
                                .from('whatsapp_instances')
                                .update({
                                    status: 'connected',
                                    phone_number: phoneNumber,
                                    has_qr_code: false,
                                    qr_code: null,
                                    qr_expires_at: null,
                                    updated_at: new Date().toISOString()
                                })
                                .eq('instance_id', clientId);
                            
                            console.log(\`‚úÖ [READY-EXPERIMENTAL] Banco atualizado (tentativa \${retry + 1})\`);
                            break;
                        } catch (error) {
                            console.error(\`‚ùå [READY-EXPERIMENTAL] Erro no banco (tentativa \${retry + 1}):\`, error.message);
                            if (retry < 2) await new Promise(r => setTimeout(r, 1000));
                        }
                    }
                    
                    // Emitir WebSocket com retry
                    for (let retry = 0; retry < 3; retry++) {
                        try {
                            io.emit(\`client_status_\${clientId}\`, {
                                clientId,
                                status: 'connected',
                                phoneNumber,
                                hasQrCode: false,
                                timestamp: Date.now()
                            });
                            
                            console.log(\`‚úÖ [READY-EXPERIMENTAL] WebSocket emitido (tentativa \${retry + 1})\`);
                            break;
                        } catch (error) {
                            console.error(\`‚ùå [READY-EXPERIMENTAL] Erro WebSocket (tentativa \${retry + 1}):\`, error.message);
                            if (retry < 2) await new Promise(r => setTimeout(r, 500));
                        }
                    }
                }
            } catch (error) {
                console.error(\`‚ùå [\${clientId}] Erro ao processar evento ready:\`, error);
            }
        });

        client.on('authenticated', () => {
            console.log(\`üîê [\${clientId}] Cliente autenticado experimentalmente\`);
            if (clients[clientId]) {
                clients[clientId].status = 'authenticated';
                clients[clientId].lastActivity = new Date();
            }
        });

        client.on('auth_failure', async (msg) => {
            console.log(\`‚ùå [\${clientId}] FALHA DE AUTENTICA√á√ÉO EXPERIMENTAL:\`, msg);
            if (clients[clientId]) {
                clients[clientId].status = 'auth_failed';
                await updateInstanceStatus(clientId, 'auth_failed');
            }
            
            // Recupera√ß√£o autom√°tica ap√≥s falha de auth
            setTimeout(() => {
                console.log(\`üîÑ [\${clientId}] Recupera√ß√£o autom√°tica ap√≥s falha de auth...\`);
                initClient(clientId, true).catch(console.error);
            }, RECOVERY_DELAY);
        });

        client.on('disconnected', async (reason) => {
            console.log(\`üîå [\${clientId}] DESCONECTADO EXPERIMENTAL:\`, reason);
            if (clients[clientId]) {
                clients[clientId].status = 'disconnected';
                clients[clientId].hasQrCode = false;
                clients[clientId].qrCode = null;
                clients[clientId].phoneNumber = null;
                await updateInstanceStatus(clientId, 'disconnected');
            }
            
            // Recupera√ß√£o autom√°tica ap√≥s desconex√£o (a menos que seja intencional)
            if (reason !== 'LOGOUT') {
                setTimeout(() => {
                    console.log(\`üîÑ [\${clientId}] Recupera√ß√£o autom√°tica ap√≥s desconex√£o: \${reason}\`);
                    initClient(clientId, true).catch(console.error);
                }, RECOVERY_DELAY);
            }
        });

        // INICIALIZAR COM TIMEOUT PERSONALIZADO
        console.log(\`üîÑ [\${clientId}] Inicializando cliente com timeout de 10 minutos...\`);
        
        // Promise com timeout personalizado
        const initPromise = client.initialize();
        const timeoutPromise = new Promise((_, reject) => {
            setTimeout(() => reject(new Error('Timeout de inicializa√ß√£o (10 minutos)')), 600000);
        });
        
        await Promise.race([initPromise, timeoutPromise]);
        console.log(\`‚úÖ [\${clientId}] Cliente inicializado com sucesso - aguardando QR ou ready\`);
        
    } catch (error) {
        console.error(\`‚ùå [\${clientId}] Erro na inicializa√ß√£o experimental:\`, error);
        
        if (clients[clientId]) {
            clients[clientId].status = 'init_failed';
        }
        
        // Recupera√ß√£o autom√°tica ap√≥s erro de inicializa√ß√£o
        if (currentAttempts < MAX_RECOVERY_ATTEMPTS) {
            console.log(\`üîÑ [\${clientId}] Programando recupera√ß√£o autom√°tica ap√≥s erro (\${RECOVERY_DELAY}ms)...\`);
            setTimeout(() => {
                initClient(clientId, true).catch(console.error);
            }, RECOVERY_DELAY);
        } else {
            console.log(\`‚ùå [\${clientId}] Falha definitiva ap√≥s \${MAX_RECOVERY_ATTEMPTS} tentativas\`);
            RECOVERY_ATTEMPTS.delete(recoveryKey);
            if (clients[clientId]) {
                updateInstanceStatus(clientId, 'disconnected').catch(console.error);
            }
        }
    }
};
`;

// Substituir fun√ß√£o initClient
content = content.replace(
    /\/\/ Fun√ß√£o para inicializar um novo cliente[\s\S]*?(?=\/\/ |const |app\.)/,
    bulletproofInitClient + '\n\n'
);

fs.writeFileSync(serverFile, content);
console.log('‚úÖ Corre√ß√£o experimental aplicada com sucesso!');
EOF

cd ..

echo ""
echo "üîü FINALIZANDO DIAGN√ìSTICO..."
echo "=========================="

# Limpar arquivos tempor√°rios
rm -f server/test-puppeteer-isolated.js

echo ""
echo "‚úÖ DIAGN√ìSTICO COMPLETO CONCLU√çDO!"
echo "================================="
echo ""
echo "üìã RESUMO DAS DESCOBERTAS:"
echo "‚Ä¢ Vers√£o WhatsApp Web.js: $(cd server && npm list whatsapp-web.js --depth=0 2>/dev/null | grep whatsapp-web.js | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' || echo 'unknown')"
echo "‚Ä¢ Aplicada corre√ß√£o experimental com recupera√ß√£o agressiva"
echo "‚Ä¢ Timeout aumentado para 10 minutos"
echo "‚Ä¢ Sistema de retry implementado para todas as opera√ß√µes cr√≠ticas"
echo ""
echo "üöÄ PR√ìXIMOS PASSOS:"
echo "1. Reiniciar o servidor: ./scripts/production-start-whatsapp.sh"
echo "2. Testar nova inst√¢ncia no painel admin"
echo "3. Monitorar logs: tail -f logs/whatsapp-multi-client.log"
echo ""
echo "üéØ Se o problema persistir, a causa pode ser:"
echo "‚Ä¢ Restri√ß√µes de rede/firewall bloqueando WhatsApp Web"
echo "‚Ä¢ Vers√£o incompat√≠vel do WhatsApp Web.js com WhatsApp atual"
echo "‚Ä¢ Problema de ambiente no servidor (display, fontes, etc.)"
