#!/bin/bash

echo "üîç TESTE COMPLETO DO FLUXO QR CODE"
echo "=================================="

API_BASE="https://146.59.227.248"
TEST_CLIENT_ID="test_complete_flow_$(date +%s)"

echo "üì± ID do Teste: $TEST_CLIENT_ID"
echo ""

# Fun√ß√£o para verificar status com diagn√≥stico completo
check_detailed_status() {
    local client_id=$1
    echo "üìä DIAGN√ìSTICO COMPLETO DE STATUS: $client_id"
    echo "================================================"
    
    # Status b√°sico
    echo "1Ô∏è‚É£ Status b√°sico:"
    STATUS_RESPONSE=$(curl -k -s "$API_BASE/clients/$client_id/status")
    echo "$STATUS_RESPONSE" | jq '.' 2>/dev/null || echo "Resposta n√£o √© JSON v√°lido: $STATUS_RESPONSE"
    
    echo ""
    echo "2Ô∏è‚É£ Status detalhado com diagn√≥stico:"
    DIAGNOSTIC_RESPONSE=$(curl -k -s "$API_BASE/clients/$client_id/status-diagnostic")
    echo "$DIAGNOSTIC_RESPONSE" | jq '.' 2>/dev/null || echo "Diagn√≥stico indispon√≠vel: $DIAGNOSTIC_RESPONSE"
    
    echo ""
    echo "3Ô∏è‚É£ Lista de todos os clientes:"
    curl -k -s "$API_BASE/clients" | jq '.clients[] | select(.clientId == "'$client_id'")' 2>/dev/null || echo "Cliente n√£o encontrado na lista"
    
    echo ""
    echo "4Ô∏è‚É£ Health check do servidor:"
    curl -k -s "$API_BASE/health" | jq '.activeClients, .connectedClients' 2>/dev/null || echo "Health check falhou"
    
    echo ""
    return 0
}

# FASE 1: Criar inst√¢ncia e gerar QR
echo "üöÄ FASE 1: Criando inst√¢ncia $TEST_CLIENT_ID"
echo "============================================"

CREATE_RESPONSE=$(curl -k -s -X POST "$API_BASE/clients/$TEST_CLIENT_ID/connect")
echo "Resposta da cria√ß√£o:"
echo "$CREATE_RESPONSE" | jq '.' 2>/dev/null || echo "$CREATE_RESPONSE"

echo ""
echo "‚è≥ Aguardando 5 segundos para QR ser gerado..."
sleep 5

# FASE 2: Verificar QR gerado
echo ""
echo "üì± FASE 2: Verificando QR Code inicial"
echo "====================================="
check_detailed_status "$TEST_CLIENT_ID"

# FASE 3: Aguardar e monitorar
echo ""
echo "‚è≥ FASE 3: Monitoramento por 60 segundos"
echo "========================================"
echo "üîî AGORA √â A HORA: Escaneie o QR Code com seu WhatsApp!"
echo "üì± Monitorando mudan√ßas de status..."

for i in {1..12}; do
    echo ""
    echo "üìä Verifica√ß√£o $i/12 (${i}0 segundos):"
    echo "----------------------------------------"
    
    STATUS_RESPONSE=$(curl -k -s "$API_BASE/clients/$TEST_CLIENT_ID/status")
    STATUS=$(echo "$STATUS_RESPONSE" | jq -r '.status // "unknown"')
    HAS_QR=$(echo "$STATUS_RESPONSE" | jq -r '.hasQrCode // false')
    PHONE=$(echo "$STATUS_RESPONSE" | jq -r '.phoneNumber // "N/A"')
    
    echo "Status: $STATUS | QR: $HAS_QR | Telefone: $PHONE"
    
    # Se conectou, mostrar detalhes
    if [ "$STATUS" = "connected" ]; then
        echo "üéâ SUCESSO! Inst√¢ncia conectada!"
        echo "üì± Telefone: $PHONE"
        echo "‚è∞ Tempo at√© conex√£o: ${i}0 segundos"
        
        echo ""
        echo "üìä Status final completo:"
        check_detailed_status "$TEST_CLIENT_ID"
        break
    fi
    
    # Se autenticado mas n√£o conectado ainda
    if [ "$STATUS" = "authenticated" ]; then
        echo "‚úÖ Autenticado! Aguardando ready..."
    fi
    
    sleep 10
done

# FASE 4: Teste de persist√™ncia
echo ""
echo "üîÑ FASE 4: Teste de persist√™ncia"
echo "==============================="
echo "Verificando se o status persiste ap√≥s m√∫ltiplas consultas..."

for i in {1..3}; do
    echo "Consulta de persist√™ncia $i/3:"
    STATUS_RESPONSE=$(curl -k -s "$API_BASE/clients/$TEST_CLIENT_ID/status")
    STATUS=$(echo "$STATUS_RESPONSE" | jq -r '.status // "unknown"')
    echo "Status: $STATUS"
    sleep 2
done

echo ""
echo "‚úÖ TESTE COMPLETO FINALIZADO"
echo "============================"
echo "üìù RESULTADOS:"
echo "‚Ä¢ ID do teste: $TEST_CLIENT_ID"
echo "‚Ä¢ Status final: $(curl -k -s "$API_BASE/clients/$TEST_CLIENT_ID/status" | jq -r '.status // "unknown"')"
echo ""
echo "üßπ Para limpar: curl -k -X POST \"$API_BASE/clients/$TEST_CLIENT_ID/disconnect\""