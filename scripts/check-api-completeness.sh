#!/bin/bash

# Script para verifica√ß√£o completa das APIs e depend√™ncias
# Arquivo: scripts/check-api-completeness.sh

echo "üîç VERIFICA√á√ÉO COMPLETA DAS APIS"
echo "==============================="

DOMAIN="146.59.227.248"
BACKEND_PORT=4000

echo "üìã 1. VERIFICANDO DEPEND√äNCIAS DO BACKEND"
echo "========================================="

cd /home/ubuntu/sovereign-chat-automation-hub/server

echo "üîç Verificando package.json..."
if [ -f "package.json" ]; then
    echo "‚úÖ package.json encontrado"
    
    # Verificar se express-fileupload est√° instalado
    if grep -q "express-fileupload" package.json; then
        echo "‚úÖ express-fileupload est√° no package.json"
    else
        echo "‚ùå express-fileupload N√ÉO est√° no package.json"
        echo "üì¶ Instalando express-fileupload..."
        npm install express-fileupload
    fi
    
    # Verificar outras depend√™ncias cr√≠ticas
    echo "üîç Verificando depend√™ncias cr√≠ticas:"
    DEPENDENCIES=("express" "socket.io" "whatsapp-web.js" "qrcode" "swagger-ui-express" "cors")
    
    for dep in "${DEPENDENCIES[@]}"; do
        if grep -q "\"$dep\"" package.json; then
            echo "   ‚úÖ $dep"
        else
            echo "   ‚ùå $dep FALTANDO"
        fi
    done
else
    echo "‚ùå package.json n√£o encontrado!"
fi

echo ""
echo "üìã 2. TESTANDO BACKEND DIRETO (porta $BACKEND_PORT)"
echo "================================================="

# Teste direto no backend
echo "üîç Testando endpoints b√°sicos..."
curl -s -o /dev/null -w "Health direto: %{http_code}\n" http://127.0.0.1:$BACKEND_PORT/health
curl -s -o /dev/null -w "Clients direto: %{http_code}\n" http://127.0.0.1:$BACKEND_PORT/clients
curl -s -o /dev/null -w "API-docs direto: %{http_code}\n" http://127.0.0.1:$BACKEND_PORT/api-docs
curl -s -o /dev/null -w "API-docs.json direto: %{http_code}\n" http://127.0.0.1:$BACKEND_PORT/api-docs.json

echo ""
echo "üìã 3. TESTANDO HTTPS VIA NGINX"
echo "============================="

curl -k -s -o /dev/null -w "Health HTTPS: %{http_code}\n" https://$DOMAIN/health
curl -k -s -o /dev/null -w "Clients HTTPS: %{http_code}\n" https://$DOMAIN/clients
curl -k -s -o /dev/null -w "API-docs HTTPS: %{http_code}\n" https://$DOMAIN/api-docs
curl -k -s -o /dev/null -w "API-docs.json HTTPS: %{http_code}\n" https://$DOMAIN/api-docs.json

echo ""
echo "üìã 4. TESTANDO ENDPOINTS AVAN√áADOS"
echo "================================="

# Testar endpoint de status
TEST_INSTANCE="test-instance-123"
echo "üîç Testando GET /clients/$TEST_INSTANCE/status..."
curl -k -s -o /dev/null -w "Status endpoint: %{http_code}\n" https://$DOMAIN/clients/$TEST_INSTANCE/status

# Testar endpoint de connect
echo "üîç Testando POST /clients/$TEST_INSTANCE/connect..."
curl -k -s -o /dev/null -w "Connect endpoint: %{http_code}\n" -X POST https://$DOMAIN/clients/$TEST_INSTANCE/connect

echo ""
echo "üìã 5. VERIFICANDO LOGS DE ERRO ATUAL"
echo "===================================="

echo "üîç √öltimos erros do PM2:"
pm2 logs whatsapp-multi-client --lines 10 --err 2>/dev/null | tail -10

echo ""
echo "üìã 6. STATUS DOS SERVI√áOS"
echo "======================="

echo "PM2 WhatsApp: $(pm2 describe whatsapp-multi-client 2>/dev/null | grep 'status' | head -1 || echo 'n√£o rodando')"
echo "Nginx: $(systemctl is-active nginx)"
echo "Porta 443 (HTTPS): $(ss -tlnp | grep :443 | wc -l) conex√µes"
echo "Porta 4000 (Backend): $(ss -tlnp | grep :4000 | wc -l) conex√µes"

echo ""
echo "üéØ RESUMO DOS PROBLEMAS ENCONTRADOS:"
echo "=================================="
echo "‚Ä¢ Se depend√™ncias est√£o faltando, instale com: npm install"
echo "‚Ä¢ Se endpoints retornam 404, verifique se o servidor est√° rodando"
echo "‚Ä¢ Se h√° erros de protocolo Chrome, reinicie o servidor"
echo "‚Ä¢ Execute: sudo ./scripts/production-stop-whatsapp.sh && sudo ./scripts/production-start-whatsapp.sh"