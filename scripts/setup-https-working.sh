
#!/bin/bash

# Script HTTPS que FUNCIONA - Baseado no setup-simple-https.sh
# Corrige apenas o roteamento da API mantendo o SSL que funcionava
# Arquivo: scripts/setup-https-working.sh

echo "üîí SETUP HTTPS QUE FUNCIONA - SSL COMPAT√çVEL"
echo "============================================"

# Verificar se est√° rodando como root
if [ "$EUID" -ne 0 ]; then
    echo "‚ùå Execute como root: sudo ./scripts/setup-https-working.sh"
    exit 1
fi

DOMAIN="146.59.227.248"
BACKEND_PORT=4000
FRONTEND_PORT=8080
SSL_DIR="/etc/ssl/whatsapp"

echo "üéØ Configura√ß√£o que funciona:"
echo "  ‚Ä¢ Dom√≠nio: $DOMAIN"
echo "  ‚Ä¢ Backend: $BACKEND_PORT"
echo "  ‚Ä¢ Frontend: $FRONTEND_PORT"
echo "  ‚Ä¢ SSL: $SSL_DIR"

# PASSO 1: Parar servi√ßos
echo ""
echo "üõë PASSO 1: Parando servi√ßos..."
systemctl stop nginx 2>/dev/null || true
./scripts/production-stop-whatsapp.sh 2>/dev/null || true

# PASSO 2: Certificado SSL SIMPLES que funcionava
echo ""
echo "üîê PASSO 2: Configurando certificado SSL simples (que funcionava)..."
mkdir -p $SSL_DIR

# Usar certificado simples que funcionava antes
if [ ! -f "$SSL_DIR/privkey.pem" ] || [ ! -f "$SSL_DIR/fullchain.pem" ]; then
    echo "üîß Criando certificado SSL simples (m√©todo que funcionava)..."
    
    # M√©todo simples que funcionava
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout $SSL_DIR/privkey.pem \
        -out $SSL_DIR/fullchain.pem \
        -subj "/C=BR/ST=SP/L=Sao Paulo/O=WhatsApp/CN=$DOMAIN" \
        -extensions v3_ca \
        -config <(echo "[v3_ca]
basicConstraints = CA:FALSE
keyUsage = digitalSignature, keyEncipherment
subjectAltName = IP:$DOMAIN,DNS:localhost")

    echo "‚úÖ Certificado SSL simples criado (m√©todo que funcionava)"
fi

# Definir permiss√µes
chmod 600 $SSL_DIR/privkey.pem
chmod 644 $SSL_DIR/fullchain.pem

# PASSO 3: Configura√ß√£o Nginx que funciona + API corrigida
echo ""
echo "‚öôÔ∏è PASSO 3: Configurando Nginx (SSL que funciona + API corrigida)..."

cat > /etc/nginx/sites-available/whatsapp-working << EOF
# Configura√ß√£o HTTPS que FUNCIONA + API corrigida
# SSL simples + Roteamento API correto

# Redirecionar HTTP para HTTPS
server {
    listen 80;
    server_name $DOMAIN;
    return 301 https://\$server_name\$request_uri;
}

# Servidor HTTPS que funciona
server {
    listen 443 ssl;
    server_name $DOMAIN;
    
    # Certificados SSL simples (que funcionavam)
    ssl_certificate $SSL_DIR/fullchain.pem;
    ssl_certificate_key $SSL_DIR/privkey.pem;
    
    # Configura√ß√µes SSL simples e compat√≠veis
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    
    # Headers b√°sicos
    proxy_set_header Host \$host;
    proxy_set_header X-Real-IP \$remote_addr;
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto \$scheme;
    
    # Health Check
    location /health {
        proxy_pass http://127.0.0.1:$BACKEND_PORT/health;
        proxy_http_version 1.1;
        proxy_connect_timeout 15s;
        proxy_send_timeout 15s;
        proxy_read_timeout 15s;
    }
    
    # API Routes - CORRIGIDO para funcionar
    location /api-docs {
        proxy_pass http://127.0.0.1:$BACKEND_PORT/api-docs;
        proxy_http_version 1.1;
        proxy_connect_timeout 30s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    location /clients {
        proxy_pass http://127.0.0.1:$BACKEND_PORT/clients;
        proxy_http_version 1.1;
        proxy_connect_timeout 30s;
        proxy_send_timeout 90s;
        proxy_read_timeout 90s;
        
        # Permitir m√©todos HTTP
        if (\$request_method = 'OPTIONS') {
            return 204;
        }
    }
    
    # Rota espec√≠fica para conectar clientes (QR Code)
    location ~ ^/clients/([^/]+)/(connect|disconnect|status|chats|send-message) {
        proxy_pass http://127.0.0.1:$BACKEND_PORT\$uri;
        proxy_http_version 1.1;
        proxy_connect_timeout 30s;
        proxy_send_timeout 120s;
        proxy_read_timeout 120s;
        
        # Permitir m√©todos HTTP
        if (\$request_method = 'OPTIONS') {
            return 204;
        }
    }
    
    # WebSocket para Socket.IO
    location /socket.io/ {
        proxy_pass http://127.0.0.1:$BACKEND_PORT/socket.io/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_connect_timeout 15s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    # Frontend (React app) - rota padr√£o
    location / {
        proxy_pass http://127.0.0.1:$FRONTEND_PORT;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass \$http_upgrade;
        proxy_connect_timeout 15s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
    
    # Logs
    access_log /var/log/nginx/whatsapp-working-access.log;
    error_log /var/log/nginx/whatsapp-working-error.log warn;
}
EOF

# Ativar site
rm -f /etc/nginx/sites-enabled/default
rm -f /etc/nginx/sites-enabled/whatsapp-multi-client 2>/dev/null || true
rm -f /etc/nginx/sites-enabled/whatsapp-unified 2>/dev/null || true
ln -sf /etc/nginx/sites-available/whatsapp-working /etc/nginx/sites-enabled/

# PASSO 4: Testar configura√ß√£o Nginx
echo ""
echo "üß™ PASSO 4: Testando configura√ß√£o Nginx..."
nginx -t
if [ $? -ne 0 ]; then
    echo "‚ùå Erro na configura√ß√£o Nginx"
    exit 1
fi

# PASSO 5: Iniciar servidor WhatsApp
echo ""
echo "üöÄ PASSO 5: Iniciando servidor WhatsApp..."
./scripts/production-start-whatsapp.sh

# Aguardar servidor
sleep 10

# PASSO 6: Iniciar Nginx
echo ""
echo "üîß PASSO 6: Iniciando Nginx..."
systemctl start nginx
systemctl enable nginx

# Aguardar inicializa√ß√£o
sleep 5

# PASSO 7: Testes b√°sicos
echo ""
echo "üß™ PASSO 7: Testes b√°sicos..."

echo "üìç Teste 1: Health check direto"
curl -s --max-time 10 http://localhost:$BACKEND_PORT/health | head -3 || echo "‚ùå Falha teste direto"

echo ""
echo "üìç Teste 2: Health check via HTTPS"
curl -k -s --max-time 15 https://$DOMAIN/health | head -3 || echo "‚ùå Falha teste HTTPS"

echo ""
echo "üìç Teste 3: API Swagger via HTTPS"
curl -k -s --max-time 15 https://$DOMAIN/api-docs | head -5 || echo "‚ùå Falha teste Swagger"

echo ""
echo "üìç Teste 4: Clients API via HTTPS"
curl -k -s --max-time 15 https://$DOMAIN/clients | head -3 || echo "‚ùå Falha teste Clients"

# Status final
echo ""
echo "üéâ SETUP HTTPS QUE FUNCIONA CONCLU√çDO!"
echo "======================================"
echo ""
echo "‚úÖ SSL: Certificado simples (m√©todo que funcionava)"
echo "‚úÖ Nginx: Configura√ß√£o compat√≠vel + API corrigida" 
echo "‚úÖ Roteamento: API routes funcionando"
echo "‚úÖ CORS: Apenas no servidor Node.js"
echo ""
echo "üåê URLs para testar:"
echo "  ‚Ä¢ HTTPS Health: https://$DOMAIN/health"
echo "  ‚Ä¢ HTTPS API Docs: https://$DOMAIN/api-docs"  
echo "  ‚Ä¢ HTTPS Clients: https://$DOMAIN/clients"
echo "  ‚Ä¢ HTTPS Frontend: https://$DOMAIN/"
echo ""
echo "üìä Status dos servi√ßos:"
echo "  ‚Ä¢ Nginx: \$(systemctl is-active nginx)"
echo "  ‚Ä¢ WhatsApp Server: \$(if lsof -Pi :$BACKEND_PORT -sTCP:LISTEN -t >/dev/null 2>&1; then echo 'active'; else echo 'inactive'; fi)"
echo ""
echo "üìù Logs importantes:"
echo "  ‚Ä¢ Nginx: tail -f /var/log/nginx/whatsapp-working-error.log"
echo "  ‚Ä¢ WhatsApp: tail -f logs/whatsapp-multi-client.log"
echo ""
echo "üîç Para debugging:"
echo "  ‚Ä¢ Verificar portas: lsof -i :$BACKEND_PORT -i :$FRONTEND_PORT"
echo "  ‚Ä¢ Certificado: openssl x509 -in $SSL_DIR/fullchain.pem -text -noout"
echo ""
echo "üí° Diferen√ßas desta vers√£o:"
echo "  1. SSL simples (m√©todo que funcionava antes)"
echo "  2. API routes corrigidas (Swagger + Clients + Connect)"
echo "  3. Timeouts otimizados (15s health, 30-120s API)"
echo "  4. Sem configura√ß√µes SSL complexas que causavam erro"
echo ""
echo "üö® IMPORTANTE: Agora acesse https://$DOMAIN/health no navegador"
echo "   e aceite o certificado SSL para que tudo funcione."
