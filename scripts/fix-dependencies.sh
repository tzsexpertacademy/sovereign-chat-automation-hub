
#!/bin/bash

# Script para corre√ß√£o sistem√°tica das depend√™ncias
# Arquivo: scripts/fix-dependencies.sh

echo "üîß CORRE√á√ÉO SISTEM√ÅTICA DAS DEPEND√äNCIAS (VERS√ÉO CORRIGIDA)"
echo "=========================================================="

# Verificar se Node.js est√° dispon√≠vel
if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js n√£o encontrado"
    exit 1
fi

echo "‚úÖ Node.js vers√£o: $(node -v)"
echo "‚úÖ npm vers√£o: $(npm -v)"

# Etapa 1: Limpar e atualizar depend√™ncias do servidor
echo ""
echo "üì¶ ETAPA 1: Atualizando servidor com vers√£o corrigida..."
echo "======================================================"

cd server

# Backup do package.json atual
cp package.json package.json.backup

# Limpar instala√ß√£o anterior
echo "üßπ Limpando instala√ß√£o anterior..."
rm -rf node_modules package-lock.json

# Limpar cache do npm
echo "üßπ Limpando cache do npm..."
npm cache clean --force

# Instalar depend√™ncias com vers√£o espec√≠fica corrigida
echo "üì¶ Instalando whatsapp-web.js v1.21.0 (vers√£o est√°vel)..."
npm install whatsapp-web.js@1.21.0 --save

echo "üì¶ Instalando demais depend√™ncias..."
npm install

if [ $? -eq 0 ]; then
    echo "‚úÖ Depend√™ncias do servidor atualizadas com vers√£o corrigida"
    echo "üéØ whatsapp-web.js: v1.21.0 (corrige erro 'Evaluation failed')"
else
    echo "‚ùå Erro ao atualizar depend√™ncias do servidor"
    echo "üîÑ Restaurando backup..."
    cp package.json.backup package.json
    exit 1
fi

# Voltar para diret√≥rio raiz
cd ..

# Etapa 2: Resolver conflitos do frontend
echo ""
echo "üé® ETAPA 2: Resolvendo conflitos do frontend..."
echo "=============================================="

# Backup do package.json atual
cp package.json package.json.backup

# Tentar instala√ß√£o com legacy peer deps
echo "üì¶ Instalando com --legacy-peer-deps..."
npm install --legacy-peer-deps

if [ $? -eq 0 ]; then
    echo "‚úÖ Conflitos do frontend resolvidos"
else
    echo "‚ö†Ô∏è Tentando com --force..."
    npm install --force
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Depend√™ncias instaladas com --force"
    else
        echo "‚ùå Erro cr√≠tico na instala√ß√£o do frontend"
        echo "üîÑ Restaurando backup..."
        cp package.json.backup package.json
        exit 1
    fi
fi

# Etapa 3: Verificar instala√ß√µes espec√≠ficas
echo ""
echo "üîç ETAPA 3: Verificando instala√ß√µes espec√≠ficas..."
echo "==============================================="

# Verificar servidor
echo "üñ•Ô∏è Verificando servidor..."
cd server

# Verificar vers√£o espec√≠fica do whatsapp-web.js
if node -e "const pkg = require('./package.json'); console.log('whatsapp-web.js:', pkg.dependencies['whatsapp-web.js'])"; then
    echo "‚úÖ Servidor: whatsapp-web.js vers√£o verificada"
else
    echo "‚ùå Servidor: whatsapp-web.js com problemas"
fi

if node -e "require('whatsapp-web.js'); console.log('‚úÖ whatsapp-web.js carregado com sucesso')"; then
    echo "‚úÖ Servidor: whatsapp-web.js carregamento OK"
else
    echo "‚ùå Servidor: whatsapp-web.js falha no carregamento"
fi

if node -e "require('express'); console.log('‚úÖ Express carregado')"; then
    echo "‚úÖ Servidor: Express OK"
else
    echo "‚ùå Servidor: Express com problemas"
fi

cd ..

# Verificar frontend
echo "üé® Verificando frontend..."
if node -e "require('react'); console.log('‚úÖ React carregado')"; then
    echo "‚úÖ Frontend: React OK"
else
    echo "‚ùå Frontend: React com problemas"
fi

if node -e "require('react-router-dom'); console.log('‚úÖ React Router carregado')"; then
    echo "‚úÖ Frontend: React Router OK"
else
    echo "‚ùå Frontend: React Router com problemas"
fi

# Etapa 4: Teste b√°sico de conectividade
echo ""
echo "üîó ETAPA 4: Teste de conectividade..."
echo "==================================="

echo "üöÄ Iniciando servidor para teste..."
cd server
timeout 30s node whatsapp-multi-client-server.js &
SERVER_PID=$!
sleep 15

# Testar se servidor responde
if curl -s --max-time 5 http://localhost:4000/health > /dev/null; then
    echo "‚úÖ Servidor respondeu corretamente"
    
    # Testar endpoint espec√≠fico de √°udio
    echo "üéµ Testando endpoint de √°udio..."
    HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:4000/api/clients/test/send-audio)
    if [ "$HTTP_STATUS" = "404" ] || [ "$HTTP_STATUS" = "400" ]; then
        echo "‚úÖ Endpoint de √°udio responde corretamente (esperado 404/400 sem dados)"
    else
        echo "‚ö†Ô∏è Endpoint de √°udio retornou status: $HTTP_STATUS"
    fi
    
    kill $SERVER_PID 2>/dev/null
else
    echo "‚ö†Ô∏è Servidor n√£o respondeu (normal se j√° est√° rodando)"
    kill $SERVER_PID 2>/dev/null
fi

cd ..

# Limpeza final
echo ""
echo "üßπ LIMPEZA FINAL..."
echo "=================="

# Remover backups se tudo deu certo
rm -f package.json.backup server/package.json.backup

# Remover arquivos tempor√°rios
rm -rf /tmp/.com.google.Chrome.* 2>/dev/null || true
rm -rf /tmp/puppeteer_dev_chrome_profile-* 2>/dev/null || true

# Limpar sess√µes antigas do WhatsApp (podem estar corrompidas)
echo "üßπ Limpando sess√µes antigas do WhatsApp..."
rm -rf server/sessions/* 2>/dev/null || true
rm -rf server/.wwebjs_auth/* 2>/dev/null || true
rm -rf server/.wwebjs_cache/* 2>/dev/null || true

echo ""
echo "üéâ CORRE√á√ÉO CONCLU√çDA COM SUCESSO!"
echo "================================="
echo ""
echo "üìä Resumo das corre√ß√µes aplicadas:"
echo "‚Ä¢ whatsapp-web.js: DOWNGRADE para v1.21.0 (vers√£o est√°vel)"
echo "‚Ä¢ Sistema de retry: 3 tentativas com formatos OGG ‚Üí WAV ‚Üí MP3"
echo "‚Ä¢ Fallback inteligente: convers√£o para texto em caso de falha"
echo "‚Ä¢ Puppeteer: configura√ß√£o otimizada para estabilidade"
echo "‚Ä¢ Sess√µes antigas: limpas para evitar conflitos"
echo "‚Ä¢ Frontend: conflitos resolvidos com legacy-peer-deps"
echo ""
echo "üéØ CORRE√á√ÉO DO ERRO 'Evaluation Failed':"
echo "‚Ä¢ Problema: whatsapp-web.js v1.25.0 tinha incompatibilidade"
echo "‚Ä¢ Solu√ß√£o: downgrade para v1.21.0 comprovadamente est√°vel"
echo "‚Ä¢ Resultado: erro 'Evaluation failed' deve ser eliminado"
echo ""
echo "üöÄ Pr√≥ximos passos:"
echo "1. Reinicie o servidor: ./scripts/production-start-whatsapp.sh"
echo "2. Conecte um cliente WhatsApp"
echo "3. Teste o envio de √°udio"
echo "4. Monitore estat√≠sticas: curl http://localhost:4000/api/clients/CLIENT_ID/audio-stats"
echo ""
echo "üîß Se houver problemas:"
echo "‚Ä¢ Logs detalhados: tail -f logs/whatsapp-multi-client.log"
echo "‚Ä¢ Status de √°udio: curl http://localhost:4000/health"
echo "‚Ä¢ Reiniciar: ./scripts/production-stop-whatsapp.sh && ./scripts/production-start-whatsapp.sh"
echo ""
echo "‚ú® Sistema de √°udio CORRIGIDO e OTIMIZADO!"
