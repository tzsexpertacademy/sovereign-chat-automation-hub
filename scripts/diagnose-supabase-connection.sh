#!/bin/bash

echo "üîç DIAGN√ìSTICO CONEX√ÉO SUPABASE"
echo "==============================="

SUPABASE_URL="https://ymygyagbvbsdfkduxmgu.supabase.co"
SUPABASE_ANON_KEY="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlteWd5YWdidmJzZGZrZHV4bWd1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA0NTQxNjksImV4cCI6MjA2NjAzMDE2OX0.DNbFrX49olS0EtLFe8aj-hBakaY5e9EJE6Qoy7hYjCI"

echo ""
echo "1Ô∏è‚É£ TESTE DE CONECTIVIDADE B√ÅSICA"
echo "================================"

echo "üåê Testando conex√£o com Supabase..."
HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SUPABASE_URL/rest/v1/" \
  -H "apikey: $SUPABASE_ANON_KEY")

if [ "$HTTP_STATUS" = "200" ]; then
    echo "‚úÖ Conectividade b√°sica OK (HTTP $HTTP_STATUS)"
else
    echo "‚ùå Problema de conectividade (HTTP $HTTP_STATUS)"
fi

echo ""
echo "2Ô∏è‚É£ TESTE DE AUTENTICA√á√ÉO"
echo "========================"

echo "üîë Testando autentica√ß√£o com chave anon..."
AUTH_TEST=$(curl -s "$SUPABASE_URL/rest/v1/" \
  -H "apikey: $SUPABASE_ANON_KEY" \
  -H "Authorization: Bearer $SUPABASE_ANON_KEY")

if echo "$AUTH_TEST" | grep -q "message.*Invalid"; then
    echo "‚ùå Chave API inv√°lida ou expirada"
    echo "   Resposta: $AUTH_TEST"
else
    echo "‚úÖ Autentica√ß√£o bem-sucedida"
fi

echo ""
echo "3Ô∏è‚É£ TESTE DE ACESSO √ÄS TABELAS"
echo "============================="

echo "üìä Testando acesso √† tabela whatsapp_instances..."
INSTANCES_TEST=$(curl -s "$SUPABASE_URL/rest/v1/whatsapp_instances?select=id,instance_id,status&limit=3" \
  -H "apikey: $SUPABASE_ANON_KEY" \
  -H "Authorization: Bearer $SUPABASE_ANON_KEY")

if echo "$INSTANCES_TEST" | grep -q "message.*Invalid"; then
    echo "‚ùå Erro no acesso √† tabela whatsapp_instances"
    echo "   Resposta: $INSTANCES_TEST"
elif echo "$INSTANCES_TEST" | grep -q "relation.*does not exist"; then
    echo "‚ùå Tabela whatsapp_instances n√£o existe"
    echo "   Resposta: $INSTANCES_TEST"
elif echo "$INSTANCES_TEST" | grep -q "\["; then
    INSTANCES_COUNT=$(echo "$INSTANCES_TEST" | jq length 2>/dev/null || echo "erro_json")
    if [ "$INSTANCES_COUNT" != "erro_json" ]; then
        echo "‚úÖ Acesso √† tabela bem-sucedido ($INSTANCES_COUNT registros)"
        echo "   Dados: $INSTANCES_TEST"
    else
        echo "‚ö†Ô∏è Resposta n√£o √© JSON v√°lido"
        echo "   Resposta: $INSTANCES_TEST"
    fi
else
    echo "‚ö†Ô∏è Resposta inesperada"
    echo "   Resposta: $INSTANCES_TEST"
fi

echo ""
echo "4Ô∏è‚É£ TESTE DE INSER√á√ÉO"
echo "===================="

TEST_INSTANCE_ID="test_diagnostic_$(date +%s)"
echo "üß™ Testando inser√ß√£o com instance_id: $TEST_INSTANCE_ID"

INSERT_TEST=$(curl -s -X POST "$SUPABASE_URL/rest/v1/whatsapp_instances" \
  -H "apikey: $SUPABASE_ANON_KEY" \
  -H "Authorization: Bearer $SUPABASE_ANON_KEY" \
  -H "Content-Type: application/json" \
  -H "Prefer: return=representation" \
  -d "{
    \"instance_id\": \"$TEST_INSTANCE_ID\",
    \"status\": \"test\",
    \"client_id\": \"206a06f2-5536-4be8-a653-cb5e997d1d0e\"
  }")

if echo "$INSERT_TEST" | grep -q "message.*Invalid"; then
    echo "‚ùå Erro na inser√ß√£o"
    echo "   Resposta: $INSERT_TEST"
elif echo "$INSERT_TEST" | grep -q "$TEST_INSTANCE_ID"; then
    echo "‚úÖ Inser√ß√£o bem-sucedida"
    
    # Limpar registro de teste
    DELETE_TEST=$(curl -s -X DELETE "$SUPABASE_URL/rest/v1/whatsapp_instances?instance_id=eq.$TEST_INSTANCE_ID" \
      -H "apikey: $SUPABASE_ANON_KEY" \
      -H "Authorization: Bearer $SUPABASE_ANON_KEY")
    echo "üßπ Registro de teste removido"
else
    echo "‚ö†Ô∏è Resposta inesperada na inser√ß√£o"
    echo "   Resposta: $INSERT_TEST"
fi

echo ""
echo "5Ô∏è‚É£ TESTE DE ATUALIZA√á√ÉO"
echo "======================="

# Buscar primeira inst√¢ncia para testar update
FIRST_INSTANCE=$(curl -s "$SUPABASE_URL/rest/v1/whatsapp_instances?select=id,instance_id&limit=1" \
  -H "apikey: $SUPABASE_ANON_KEY" \
  -H "Authorization: Bearer $SUPABASE_ANON_KEY")

if echo "$FIRST_INSTANCE" | grep -q "instance_id"; then
    INSTANCE_ID=$(echo "$FIRST_INSTANCE" | jq -r '.[0].instance_id' 2>/dev/null)
    
    if [ "$INSTANCE_ID" != "null" ] && [ ! -z "$INSTANCE_ID" ]; then
        echo "üß™ Testando atualiza√ß√£o na inst√¢ncia: $INSTANCE_ID"
        
        UPDATE_TEST=$(curl -s -X PATCH "$SUPABASE_URL/rest/v1/whatsapp_instances?instance_id=eq.$INSTANCE_ID" \
          -H "apikey: $SUPABASE_ANON_KEY" \
          -H "Authorization: Bearer $SUPABASE_ANON_KEY" \
          -H "Content-Type: application/json" \
          -d "{\"updated_at\": \"$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)\"}")
        
        if [ -z "$UPDATE_TEST" ] || [ "$UPDATE_TEST" = "" ]; then
            echo "‚úÖ Atualiza√ß√£o bem-sucedida (resposta vazia √© normal)"
        else
            echo "‚ö†Ô∏è Resposta na atualiza√ß√£o: $UPDATE_TEST"
        fi
    else
        echo "‚ö†Ô∏è N√£o foi poss√≠vel extrair instance_id para teste"
    fi
else
    echo "‚ö†Ô∏è Nenhuma inst√¢ncia encontrada para teste de atualiza√ß√£o"
fi

echo ""
echo "6Ô∏è‚É£ VERIFICA√á√ÉO NO C√ìDIGO DO SERVIDOR"
echo "===================================="

cd /home/ubuntu/sovereign-chat-automation-hub/server

echo "üîç Verificando configura√ß√£o do Supabase no servidor..."
if grep -q "supabaseUrl.*ymygyagbvbsdfkduxmgu" whatsapp-multi-client-server.js; then
    echo "‚úÖ URL do Supabase configurada corretamente"
else
    echo "‚ùå URL do Supabase n√£o encontrada ou incorreta"
fi

if grep -q "supabaseKey.*eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ" whatsapp-multi-client-server.js; then
    echo "‚úÖ Chave do Supabase configurada"
else
    echo "‚ùå Chave do Supabase n√£o encontrada"
fi

echo ""
echo "7Ô∏è‚É£ TESTE DE FUN√á√ÉO updateInstanceStatus"
echo "======================================"

echo "üß™ Testando fun√ß√£o updateInstanceStatus do servidor..."
if grep -q "updateInstanceStatus" whatsapp-multi-client-server.js; then
    echo "‚úÖ Fun√ß√£o updateInstanceStatus encontrada no c√≥digo"
    
    # Mostrar configura√ß√£o atual
    echo "üìã Configura√ß√£o atual:"
    grep -A 5 -B 2 "updateInstanceStatus.*async" whatsapp-multi-client-server.js | head -10
else
    echo "‚ùå Fun√ß√£o updateInstanceStatus n√£o encontrada"
fi

echo ""
echo "8Ô∏è‚É£ RESULTADOS E RECOMENDA√á√ïES"
echo "============================="

echo "üìä Resumo dos testes:"
echo "   Conectividade: $([ "$HTTP_STATUS" = "200" ] && echo "‚úÖ OK" || echo "‚ùå FALHA")"
echo "   Autentica√ß√£o: $(echo "$AUTH_TEST" | grep -q "Invalid" && echo "‚ùå FALHA" || echo "‚úÖ OK")"
echo "   Acesso tabelas: $(echo "$INSTANCES_TEST" | grep -q "\[" && echo "‚úÖ OK" || echo "‚ùå FALHA")"

if [ "$HTTP_STATUS" != "200" ] || echo "$AUTH_TEST" | grep -q "Invalid"; then
    echo ""
    echo "‚ùå PROBLEMAS IDENTIFICADOS:"
    echo "üí° SOLU√á√ïES:"
    echo "   1. Verificar se a chave API n√£o expirou"
    echo "   2. Verificar RLS (Row Level Security) nas tabelas"
    echo "   3. Verificar permiss√µes da role 'anon'"
    echo "   4. Testar com service_role_key se necess√°rio"
else
    echo ""
    echo "‚úÖ SUPABASE FUNCIONANDO CORRETAMENTE"
fi

echo ""
echo "‚úÖ Diagn√≥stico Supabase conclu√≠do!"