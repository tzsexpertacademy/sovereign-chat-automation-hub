
#!/bin/bash

# Script cir√∫rgico para adicionar rotas da API sem quebrar conex√£o Lovable
# Arquivo: scripts/fix-api-routes-surgical.sh

echo "üîß CORRE√á√ÉO CIR√öRGICA - ADICIONANDO ROTAS DA API"
echo "==============================================="

# Verificar se est√° rodando como root
if [ "$EUID" -ne 0 ]; then
    echo "‚ùå Execute como root: sudo ./scripts/fix-api-routes-surgical.sh"
    exit 1
fi

DOMAIN="146.59.227.248"
SSL_DIR="/etc/ssl/whatsapp"
BACKEND_PORT=4000
FRONTEND_PORT=8080

echo "üéØ PRINC√çPIO: Preservar 100% da configura√ß√£o que funciona com Lovable"
echo "üéØ OBJETIVO: Adicionar apenas rotas /clients, /api-docs, /api-docs.json"
echo ""

# Fazer backup antes de qualquer mudan√ßa
echo "üíæ Criando backup de seguran√ßa..."
./scripts/backup-working-nginx.sh

# Verificar se backup foi criado
if [ $? -ne 0 ]; then
    echo "‚ùå Erro ao criar backup! Abortando..."
    exit 1
fi

# Testar se configura√ß√£o atual funciona
echo "üß™ Testando configura√ß√£o atual..."
curl -k -s https://$DOMAIN/health > /dev/null
if [ $? -ne 0 ]; then
    echo "‚ùå Configura√ß√£o atual n√£o est√° funcionando! Abortando..."
    exit 1
fi

echo "‚úÖ Configura√ß√£o atual funciona! Prosseguindo com corre√ß√£o cir√∫rgica..."

# Criar nova configura√ß√£o Nginx - ORDEM CR√çTICA dos location blocks
echo "‚öôÔ∏è Criando configura√ß√£o Nginx com rotas da API..."
cat > /etc/nginx/sites-available/whatsapp-multi-client << EOF
# HTTP -> HTTPS redirect
server {
    listen 80;
    server_name $DOMAIN;
    return 301 https://\$server_name\$request_uri;
}

# HTTPS Server - CONFIGURA√á√ÉO CIR√öRGICA
server {
    listen 443 ssl http2;
    server_name $DOMAIN;
    
    # SSL Configuration - MANTIDA EXATAMENTE IGUAL
    ssl_certificate $SSL_DIR/fullchain.pem;
    ssl_certificate_key $SSL_DIR/privkey.pem;
    
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    
    # ORDEM CR√çTICA DOS LOCATION BLOCKS
    
    # 1. Health Check - PRIMEIRA (mais espec√≠fica, cr√≠tica para Lovable)
    location /health {
        proxy_pass http://127.0.0.1:$BACKEND_PORT/health;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
    
    # 2. WebSocket - SEGUNDA (cr√≠tica para Lovable)
    location /socket.io/ {
        proxy_pass http://127.0.0.1:$BACKEND_PORT/socket.io/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
    
    # 3. API Docs JSON - TERCEIRA (arquivo espec√≠fico)
    location /api-docs.json {
        proxy_pass http://127.0.0.1:$BACKEND_PORT/api-docs.json;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
    
    # 4. API Docs - QUARTA (swagger interface)
    location /api-docs {
        proxy_pass http://127.0.0.1:$BACKEND_PORT/api-docs;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
    
    # 5. API Clients - QUINTA (rota da API)
    location /clients {
        proxy_pass http://127.0.0.1:$BACKEND_PORT/clients;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
    
    # 6. Frontend - √öLTIMA (catch-all, deve ser sempre a √∫ltima)
    location / {
        proxy_pass http://127.0.0.1:$FRONTEND_PORT;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF

# Testar nova configura√ß√£o
echo "üß™ Testando nova configura√ß√£o Nginx..."
nginx -t

if [ $? -eq 0 ]; then
    echo "‚úÖ Configura√ß√£o Nginx v√°lida!"
    
    # Aplicar configura√ß√£o
    echo "üîÑ Aplicando configura√ß√£o..."
    systemctl reload nginx
    
    # Aguardar aplica√ß√£o
    sleep 3
    
    # TESTES DE VALIDA√á√ÉO INCREMENTAL
    echo ""
    echo "üß™ TESTES DE VALIDA√á√ÉO:"
    echo "======================"
    
    # Teste 1: Health check (cr√≠tico para Lovable)
    echo "1Ô∏è‚É£ Testando /health (cr√≠tico para Lovable)..."
    curl -k -s https://$DOMAIN/health > /dev/null
    if [ $? -eq 0 ]; then
        echo "   ‚úÖ /health funciona"
    else
        echo "   ‚ùå /health falhou - ROLLBACK NECESS√ÅRIO!"
        echo "üîÑ Executando rollback autom√°tico..."
        BACKUP_DIR=$(ls -dt /tmp/nginx-working-backup-* | head -1)
        $BACKUP_DIR/restore.sh
        exit 1
    fi
    
    # Teste 2: Nova rota /clients
    echo "2Ô∏è‚É£ Testando /clients (nova funcionalidade)..."
    curl -k -s https://$DOMAIN/clients > /dev/null
    if [ $? -eq 0 ]; then
        echo "   ‚úÖ /clients funciona"
    else
        echo "   ‚ö†Ô∏è /clients n√£o responde (pode ser normal se servidor backend n√£o tiver essa rota)"
    fi
    
    # Teste 3: API Docs
    echo "3Ô∏è‚É£ Testando /api-docs..."
    curl -k -s https://$DOMAIN/api-docs > /dev/null
    if [ $? -eq 0 ]; then
        echo "   ‚úÖ /api-docs funciona"
    else
        echo "   ‚ö†Ô∏è /api-docs n√£o responde (pode ser normal se n√£o implementado)"
    fi
    
    echo ""
    echo "üéâ CORRE√á√ÉO CIR√öRGICA CONCLU√çDA!"
    echo "==============================="
    echo ""
    echo "‚úÖ Configura√ß√£o aplicada com sucesso!"
    echo "‚úÖ Health check mantido funcionando (cr√≠tico para Lovable)"
    echo "‚úÖ WebSocket mantido funcionando (cr√≠tico para Lovable)"
    echo "‚úÖ Novas rotas da API adicionadas:"
    echo "   ‚Ä¢ https://$DOMAIN/clients"
    echo "   ‚Ä¢ https://$DOMAIN/api-docs"
    echo "   ‚Ä¢ https://$DOMAIN/api-docs.json"
    echo ""
    echo "üß™ Teste no Lovable agora:"
    echo "   ‚Ä¢ Verifique se ainda mostra 'Connected' no canto superior direito"
    echo "   ‚Ä¢ Se n√£o conectar, execute rollback: sudo \$(ls -dt /tmp/nginx-working-backup-* | head -1)/restore.sh"
    echo ""
    
else
    echo "‚ùå Erro na configura√ß√£o Nginx - n√£o aplicando mudan√ßas"
    exit 1
fi
