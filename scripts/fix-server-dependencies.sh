#!/bin/bash

# fix-server-dependencies.sh - Corrigir depend√™ncias e inicializar servidor

echo "üîß CORRE√á√ÉO DEFINITIVA DAS DEPEND√äNCIAS DO SERVIDOR"
echo "=================================================="

cd /home/ubuntu/sovereign-chat-automation-hub

echo "1Ô∏è‚É£ PARANDO TODOS OS PROCESSOS NODE"
echo "=================================="

echo "üî™ Matando todos os processos Node.js..."
pkill -f node 2>/dev/null || echo "   ‚ÑπÔ∏è Nenhum processo Node.js para matar"

sleep 2

echo ""
echo "2Ô∏è‚É£ VERIFICANDO E INSTALANDO DEPEND√äNCIAS"
echo "========================================"

echo "üîç Entrando na pasta do servidor..."
cd server

echo "üîç Verificando package.json..."
if [ ! -f "package.json" ]; then
    echo "‚ùå package.json n√£o encontrado! Criando..."
    cat > package.json << 'EOF'
{
  "name": "whatsapp-multi-client-server",
  "version": "1.0.0",
  "description": "Servidor WhatsApp Multi-Cliente",
  "main": "whatsapp-multi-client-server.js",
  "scripts": {
    "start": "node whatsapp-multi-client-server.js",
    "dev": "node whatsapp-multi-client-server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "socket.io": "^4.7.2",
    "cors": "^2.8.5",
    "express-fileupload": "^1.4.0",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^5.0.0",
    "whatsapp-web.js": "^1.22.2",
    "qrcode": "^1.5.3",
    "@supabase/supabase-js": "^2.38.0",
    "mime-types": "^2.1.35",
    "puppeteer": "^21.3.8"
  }
}
EOF
    echo "   ‚úÖ package.json criado"
fi

echo ""
echo "üîç Removendo node_modules antigo..."
rm -rf node_modules package-lock.json

echo ""
echo "üì¶ Instalando depend√™ncias..."
npm install

if [ $? -eq 0 ]; then
    echo "   ‚úÖ Depend√™ncias instaladas com sucesso"
else
    echo "   ‚ùå Erro ao instalar depend√™ncias"
    echo "   üîÑ Tentando com --force..."
    npm install --force
fi

echo ""
echo "3Ô∏è‚É£ VERIFICANDO ARQUIVOS NECESS√ÅRIOS"
echo "==================================="

echo "üîç Verificando arquivos principais..."
if [ ! -f "whatsapp-multi-client-server.js" ]; then
    echo "‚ùå Arquivo principal n√£o encontrado!"
    exit 1
fi

if [ ! -d "modules" ]; then
    echo "‚ùå Pasta modules n√£o encontrada!"
    exit 1
fi

echo "   ‚úÖ Arquivos principais encontrados"

echo ""
echo "4Ô∏è‚É£ INICIANDO SERVIDOR CORRIGIDO"
echo "==============================="

echo "üöÄ Iniciando servidor com logs detalhados..."
NODE_ENV=production node whatsapp-multi-client-server.js > ../server-fixed.log 2>&1 &
SERVER_PID=$!

echo "   ‚úÖ Servidor iniciado (PID: $SERVER_PID)"
echo "   üìù Logs: tail -f server-fixed.log"

sleep 8

echo ""
echo "5Ô∏è‚É£ TESTANDO SERVIDOR CORRIGIDO"
echo "=============================="

echo "üîç Verificando se o processo est√° ativo..."
if ps -p $SERVER_PID > /dev/null; then
    echo "   ‚úÖ Processo ativo (PID: $SERVER_PID)"
else
    echo "   ‚ùå Processo morreu. Verificando logs..."
    tail -20 ../server-fixed.log
    exit 1
fi

echo ""
echo "üîç Verificando porta 3001..."
sleep 2
if netstat -tlnp | grep 3001 > /dev/null; then
    echo "   ‚úÖ Porta 3001 aberta"
else
    echo "   ‚ùå Porta 3001 n√£o est√° aberta"
    echo "   üìã Logs recentes:"
    tail -10 ../server-fixed.log
fi

echo ""
echo "üîç Testando health check..."
HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -m 5 "http://localhost:3001/health" 2>/dev/null)
echo "   Status: $HEALTH_STATUS"

if [ "$HEALTH_STATUS" = "200" ]; then
    echo "   ‚úÖ Health check funcionando!"
else
    echo "   ‚ùå Health check falhou"
    echo "   üìã √öltimas linhas do log:"
    tail -10 ../server-fixed.log
fi

echo ""
echo "üîç Testando endpoint /api/clients..."
API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -m 5 "http://localhost:3001/api/clients" 2>/dev/null)
echo "   Status: $API_STATUS"

if [ "$API_STATUS" = "200" ] || [ "$API_STATUS" = "500" ]; then
    echo "   ‚úÖ Endpoint /api/ funcionando!"
else
    echo "   ‚ùå Endpoint /api/ n√£o funciona"
fi

cd ..

echo ""
echo "6Ô∏è‚É£ TESTANDO VIA NGINX"
echo "===================="

echo "üîç Testando health via Nginx..."
NGINX_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" -m 10 "https://146.59.227.248/health" 2>/dev/null)
echo "   Status Nginx Health: $NGINX_HEALTH"

echo ""
echo "üîç Testando API via Nginx..."
NGINX_API=$(curl -s -o /dev/null -w "%{http_code}" -m 10 "https://146.59.227.248/clients" 2>/dev/null)
echo "   Status Nginx API: $NGINX_API"

echo ""
echo "7Ô∏è‚É£ RESULTADO FINAL"
echo "=================="

if [ "$HEALTH_STATUS" = "200" ] && [ "$NGINX_HEALTH" = "200" ]; then
    echo "üéâ SERVIDOR CORRIGIDO E FUNCIONANDO!"
    echo ""
    echo "‚úÖ Depend√™ncias instaladas"
    echo "‚úÖ Servidor rodando na porta 3001"
    echo "‚úÖ Health check funcionando"
    echo "‚úÖ Nginx proxy funcionando"
    echo ""
    echo "üì± TESTE NO NAVEGADOR:"
    echo "1. Acesse o chat"
    echo "2. Envie uma mensagem"
    echo "3. Deve funcionar sem erro 404"
    echo ""
    echo "üîß Para monitorar:"
    echo "   tail -f server-fixed.log"
elif [ "$HEALTH_STATUS" = "200" ]; then
    echo "‚ö†Ô∏è SERVIDOR LOCAL OK, MAS NGINX COM PROBLEMA"
    echo ""
    echo "‚úÖ Servidor local funcionando"
    echo "‚ùå Nginx proxy com problema"
    echo ""
    echo "üí° Nginx precisa ser reiniciado:"
    echo "   sudo systemctl restart nginx"
else
    echo "‚ùå SERVIDOR AINDA N√ÉO FUNCIONA"
    echo ""
    echo "üìã Logs para an√°lise:"
    echo "   tail -f server-fixed.log"
    echo ""
    echo "üîç Para debug:"
    echo "   cd server && node whatsapp-multi-client-server.js"
fi