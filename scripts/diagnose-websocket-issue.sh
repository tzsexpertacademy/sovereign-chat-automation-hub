
#!/bin/bash

# Script de diagn√≥stico completo do WebSocket
# Arquivo: scripts/diagnose-websocket-issue.sh

echo "üîç DIAGN√ìSTICO COMPLETO DO WEBSOCKET"
echo "===================================="

DOMAIN="146.59.227.248"
BACKEND_PORT="4000"

echo "üìã 1. VERIFICANDO SERVIDOR NODE.JS"
echo "=================================="

# Verificar PM2
echo "üîç Status PM2:"
if command -v pm2 > /dev/null 2>&1; then
    pm2 status
    echo ""
    echo "üîç Logs recentes do servidor:"
    pm2 logs whatsapp-multi-client --lines 10 2>/dev/null || echo "‚ö†Ô∏è Nenhum log encontrado"
else
    echo "‚ùå PM2 n√£o encontrado"
fi

echo ""
echo "üìã 2. VERIFICANDO PORTAS"
echo "======================="

# Verificar se porta 4000 est√° escutando
echo "üîç Porta 4000 (Backend):"
PORT_4000=$(sudo netstat -tlnp | grep ":4000 ")
if [ -n "$PORT_4000" ]; then
    echo "‚úÖ Porta 4000 em uso:"
    echo "$PORT_4000"
else
    echo "‚ùå Porta 4000 n√£o est√° escutando"
fi

echo ""
echo "üîç Porta 8080 (Frontend):"
PORT_8080=$(sudo netstat -tlnp | grep ":8080 ")
if [ -n "$PORT_8080" ]; then
    echo "‚úÖ Porta 8080 em uso:"
    echo "$PORT_8080"
else
    echo "‚ö†Ô∏è Porta 8080 n√£o est√° escutando"
fi

echo ""
echo "üìã 3. TESTANDO SERVIDOR DIRETAMENTE"
echo "=================================="

# Testar servidor Node.js diretamente
echo "üîç Testando http://localhost:4000/health:"
HEALTH_LOCAL=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:4000/health 2>/dev/null)
echo "Status: $HEALTH_LOCAL"

echo ""
echo "üîç Testando http://localhost:4000/socket.io/:"
SOCKET_LOCAL=$(curl -s -I http://localhost:4000/socket.io/ 2>/dev/null | head -1)
echo "Resposta: $SOCKET_LOCAL"

echo ""
echo "üìã 4. TESTANDO VIA NGINX"
echo "======================="

# Testar via Nginx
echo "üîç Testando https://$DOMAIN/health:"
HEALTH_NGINX=$(curl -k -s -o /dev/null -w "%{http_code}" "https://$DOMAIN/health" 2>/dev/null)
echo "Status: $HEALTH_NGINX"

echo ""
echo "üîç Testando https://$DOMAIN/socket.io/:"
SOCKET_NGINX=$(curl -k -s -I "https://$DOMAIN/socket.io/" 2>/dev/null | head -1)
echo "Resposta: $SOCKET_NGINX"

echo ""
echo "üìã 5. VERIFICANDO CONFIGURA√á√ÉO NGINX"
echo "===================================="

# Verificar configura√ß√£o Nginx
echo "üîç Configura√ß√£o Nginx atual:"
if [ -f "/etc/nginx/sites-available/whatsapp-multi-client" ]; then
    echo "‚úÖ Arquivo de configura√ß√£o existe"
    echo "üîç Verificando location /socket.io/:"
    grep -A 10 "location /socket.io/" /etc/nginx/sites-available/whatsapp-multi-client 2>/dev/null || echo "‚ùå Location /socket.io/ n√£o encontrado"
else
    echo "‚ùå Arquivo de configura√ß√£o n√£o encontrado"
fi

echo ""
echo "üìã 6. TESTANDO CONECTIVIDADE"
echo "=========================="

# Testar conectividade interna
echo "üîç Testando conectividade interna:"
INTERNAL_TEST=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:4000/health 2>/dev/null)
echo "127.0.0.1:4000/health - Status: $INTERNAL_TEST"

echo ""
echo "üìã 7. DIAGN√ìSTICO FINAL"
echo "======================"

# Diagn√≥stico final
if [ "$HEALTH_LOCAL" = "200" ]; then
    echo "‚úÖ Servidor Node.js funcionando"
    
    if [ "$HEALTH_NGINX" = "200" ]; then
        echo "‚úÖ Nginx proxy funcionando para HTTP"
        
        if [ "$SOCKET_LOCAL" != "$SOCKET_NGINX" ]; then
            echo "‚ùå PROBLEMA: WebSocket n√£o est√° sendo proxificado corretamente"
            echo "üîß SOLU√á√ÉO: Corrigir configura√ß√£o Nginx para WebSocket"
        else
            echo "‚úÖ Configura√ß√£o parece correta"
        fi
    else
        echo "‚ùå PROBLEMA: Nginx n√£o est√° proxificando corretamente"
        echo "üîß SOLU√á√ÉO: Verificar configura√ß√£o Nginx"
    fi
else
    echo "‚ùå PROBLEMA CR√çTICO: Servidor Node.js n√£o est√° respondendo"
    echo "üîß SOLU√á√ÉO: Reiniciar servidor Node.js"
    
    if command -v pm2 > /dev/null 2>&1; then
        echo "üîÑ Tentando reiniciar PM2..."
        pm2 restart whatsapp-multi-client 2>/dev/null || echo "‚ùå Falha ao reiniciar PM2"
        sleep 5
        
        # Testar novamente ap√≥s restart
        HEALTH_AFTER_RESTART=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:4000/health 2>/dev/null)
        echo "Status ap√≥s restart: $HEALTH_AFTER_RESTART"
    fi
fi

echo ""
echo "üéØ RESUMO DO DIAGN√ìSTICO"
echo "======================="
echo "Servidor Node.js (localhost:4000/health): $HEALTH_LOCAL"
echo "Nginx Proxy (https://$DOMAIN/health): $HEALTH_NGINX"
echo "WebSocket Local: $(echo "$SOCKET_LOCAL" | awk '{print $2}' | head -1)"
echo "WebSocket Nginx: $(curl -k -s -I "https://$DOMAIN/socket.io/" 2>/dev/null | head -1 | awk '{print $2}')"

echo ""
echo "üîß PR√ìXIMOS PASSOS RECOMENDADOS:"
if [ "$HEALTH_LOCAL" != "200" ]; then
    echo "1. CR√çTICO: Corrigir servidor Node.js"
    echo "   - Verificar logs: pm2 logs whatsapp-multi-client"
    echo "   - Reiniciar: pm2 restart whatsapp-multi-client"
elif [ "$HEALTH_NGINX" != "200" ]; then
    echo "1. CR√çTICO: Corrigir proxy Nginx"
    echo "   - Verificar configura√ß√£o: /etc/nginx/sites-available/whatsapp-multi-client"
    echo "   - Testar: nginx -t"
else
    echo "1. Corrigir configura√ß√£o WebSocket no Nginx"
    echo "   - Adicionar headers corretos para WebSocket"
    echo "   - Testar upgrade de conex√£o"
fi
